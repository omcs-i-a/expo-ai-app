---
description: 
globs: 
alwaysApply: false
---
# AIチャットアプリ用 Cursor ルール (.cursorrules)

## プロジェクト概要

- このプロジェクトは、React Native (Expo) を使って、多機能AIチャットアプリを開発するものです。
- Web 版 (Vercel にデプロイ) とネイティブ版 (iOS/Android) の両方に対応し、可能な限りコードを共有します。
- チャット機能では、OpenAI と Gemini の API を使い分け、ユーザーの質問に AI が回答します。
- チャットの内容に応じて、「学び」タブに情報をまとめたり、「プロ」タブに遷移して専門家に相談したりできます。
- Pro プランの価格に関する質問には、RAG (Retrieval-Augmented Generation) システムを使って回答します。

## ディレクトリ構造

my-expo-app/
├── app/ # Expo Router によりルーティングされるアプリ本体
│ ├── (tabs)/ # タブナビゲーション用のグループ（Web・ネイティブ共通）
│ │ ├── _layout.tsx # タブ全体のレイアウト設定。ここでWebとモバイルのスタイルを分岐
│ │ ├── index.tsx # ホーム画面
│ │ ├── chat.tsx # チャット画面（共通ロジック＋プラットフォームごとに条件分岐も可能）
│ │ ├── manabi.tsx # 「学び」タブ：学びに関する話題のまとめ画面
│ │ ├── pro.tsx # 「プロ」タブ：専門家選択などPro向けの画面（専門家に相談するフロー用）
│ │ └── ... # その他のタブ（例：exploreなど）
│ ├── (modals)/ # モーダル (Web, モバイル共通)
│ ├── components/ # 画面固有のコンポーネント
│ │ ├── chat/ # チャット関連コンポーネント
│ │ │ ├── Header.tsx
│ │ │ ├── MessageList.tsx
│ │ │ ├── MessageItem.tsx
│ │ │ ├── InputArea.tsx
│ │ │ └── ProModal.tsx # 専門家相談モーダル (Web, モバイル共通)
│ │ └── ...
│ ├── contexts/ # コンテキスト (状態管理)
│ │ └── ChatContext.tsx # チャットの状態 (APIキーなど)
│ ├── data/ # データ (例: ドメインモデル, APIレスポンスの型)
│ ├── hooks/ # カスタムフック
│ ├── lib/ # 外部ライブラリ (自作)
│ │ └── openai.ts # OpenAI API クライアント
│ │ └── gemini.ts # Gemini API クライアント
│ │ └── rag.ts # RAG システム クライアント
│ ├── services/ # ドメインサービス、アプリケーションサービス
│ ├── utils/ # ユーティリティ関数
│ └── constants/ # 定数
├── components/ # 再利用可能な UI コンポーネント
├── assets/
├── .gitignore
├── app.json
├── package.json
└── tsconfig.json


*   **`app/`**: Expo Router を使ったルーティング、画面コンポーネント、画面固有のコンポーネント、コンテキスト、カスタムフック、外部サービス連携、ユーティリティ関数、定数などを配置。
*   **`components/`**: 再利用可能な UI コンポーネントを配置。
*   **`constants/`**: 定数 (色、API キーなど) を配置。
*   **`data/`**: ドメインモデル、API レスポンスの型など、データ構造を定義。
*   **`hooks/`**: カスタムフックを配置。
* **`lib/`**: 外部サービス (OpenAI, Gemini, RAG) との連携ロジックを配置。
*   **`services/`**: ドメインサービス、アプリケーションサービスを配置。
*   **`utils/`**: ユーティリティ関数を配置。

## Web 版とモバイル版の区別

*   **基本的な考え方**:
    *   可能な限りコードを共有する (ロジック、コンポーネントなど)。
    *   UI/UX が異なる部分は、ファイル名で区別する (例: `chat.tsx` (モバイル版), `chat.web.tsx` (Web 版))。
    *   Expo Router が、プラットフォームに応じて適切なファイルを自動的に読み込む。
*   **`app/(tabs)/_layout.tsx`**:
    *   タブバーのレイアウトを定義 (Web 版: 左サイドバー, モバイル版: 下部タブバー)。
    *   `Platform.OS === 'web'` で条件分岐し、Web 版とモバイル版でスタイルを切り替える。
* **コンポーネント**:
    * 共通コンポーネント: `components/` に配置。
    * Web/モバイルで異なるコンポーネント
        *  共通のコンポーネントは`/components`に配置
        * Web版とモバイル版で異なるコンポーネントがある場合は、`/components/{コンポーネント名}/{コンポーネント名}.tsx`と`/components/{コンポーネント名}/{コンポーネント名}.web.tsx`にファイルを配置

## チャット機能 (詳細)

*   **API キーの切り替え**:
    *   `app/contexts/ChatContext.tsx` で、現在使用中の API キー (OpenAI or Gemini) を管理。
    *   `switchApiKey` 関数で、API キーを切り替える。
*   **「学び」タブ**:
    *   チャットでの会話 (特に AI の応答) から、「学び」に関するトピックを抽出 (キーワード、要約など)。
    *   抽出した情報を、「学び」タブ (`app/(tabs)/manabi.tsx`) に表示。
*   **「専門家への相談」フロー**:
    *   チャットで「専門家」というキーワードを検出したら、「専門家に相談しますか？」という選択肢を表示 (可能であれば、ボタンやモーダルを使う)。
    *   「はい」が選択されたら、「プロ」タブ (`app/(tabs)/professionals.tsx`) に遷移。
    *   「プロ」タブでは、専門家の一覧を表示し、ユーザーが専門家を選択できるようにする。
*   **RAG システム**:
    *   チャットで「Pro プランの価格」に関する質問がされたら、`app/lib/rag.ts` を使って、RAG システムから回答を取得し、表示する。

## コーディング規約

*   **言語**: TypeScript
*   **コンポーネント**: 関数コンポーネント + React Hooks
*   **スタイル**: StyleSheet.create (React Native)
*   **ファイル名**:
    *   コンポーネント: PascalCase (例: `MyComponent.tsx`)
    *   フック: useCamelCase (例: `useMyHook.ts`)
    *   その他: camelCase (例: `myUtility.ts`)
*   **インポート順**:
    1.  React 関連
    2.  React Native 関連
    3.  外部ライブラリ
    4.  内部モジュール (相対パス)

## その他

*   **状態管理**: React Context (または、必要に応じて Zustand, Redux などの状態管理ライブラリ) を使用。
*   **エラーハンドリング**: 各 API 呼び出しで、エラーハンドリング (try-catch) を行う。
*   **テスト**: Jest, React Testing Library などを使って、単体テスト、結合テストを実装する。
* **ドメイン駆動設計**:
    * ビジネスロジックをドメイン層( `data`, `services` )に集約
    * エンティティ、値オブジェクト、集約、リポジトリなどのパターンを適切に使い分ける

## 例外
* `app`配下のファイルについては、この限りではありません。

